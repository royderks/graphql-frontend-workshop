type FlareTag {
  bg_color_hex: String
  name: String
  text_color_hex: String
}
type Organization {
  name: String
  profile_image: String
  profile_image_90: String
  slug: String
  username: String
}
type Article {
  body_html: String
  canonical_url: String
  collection_id: Int
  comments_count: Int
  cover_image: String
  created_at: DateTime
  crossposted_at: JSON
  description: String
  edited_at: DateTime
  flare_tag: FlareTag
  id: Int
  last_comment_at: DateTime
  organization: Organization
  path: String
  positive_reactions_count: Int
  public_reactions_count: Int
  published_at: DateTime
  published_timestamp: DateTime
  readable_publish_date: String
  reading_time_minutes: Int
  slug: String
  social_image: String
  tag_list: [String]
  tags: String
  title: String
  type_of: String
  url: String
  user: User
  upvotes: Int
    @materializer (query: "totalUpvotes" arguments: [{ name: "postId" field: "id"}])
}

type User {
  github_username: String
  name: String
  profile_image: String
  profile_image_90: String
  twitter_username: String
  user_id: Int
  username: String
  website_url: String
}

type ArticleConnection {
  edges: [ArticleEdge]
  pageInfo: PageInfo!
}

type ArticleEdge {
  node: Article
  cursor: String
}

type Upvote {
  createdAt: String
  postId: String
  id: String
}

type Query {
  articles(tag: String, page: Int, per_page: Int): [Article]
    @rest(endpoint: "https://dev.to/api/articles")
  article(id: String): Article
    @rest(endpoint: "https://dev.to/api/articles/$id")
  paginatedArticles(tag: String, first: Int! = 20, after: String! = ""): ArticleConnection
    @rest(
      endpoint: "https://dev.to/api/articles?per_page=$first&page=$after"
      resultroot: "articles[]"
      ecmascript: """
      function transformREST(s) {
       let articles = JSON.parse(s);

       return JSON.stringify({
         total: 100,
         articles
       });
      }
      """
      pagination: {
        type: PAGE_NUMBER
        setters: [{ field: "total", path: "total" }]
      }
    )
  upvotes(postId: Int): [Upvote]
    @rest(
      endpoint: "https://63271076ba4a9c4753300058.mockapi.io/api/upvotes"
    )
  totalUpvotes(postId: Int): Int
    @rest(
      endpoint: "https://63271076ba4a9c4753300058.mockapi.io/api/upvotes"
      ecmascript: """
      function transformREST(s) {
       var upvotes = JSON.parse(s);

       var count = upvotes.length || 0;

       return count
      }
      """
    )
}

type Mutation {
  upvoteArticle(postId: Int): Upvote
    @rest(
      endpoint: "https://63271076ba4a9c4753300058.mockapi.io/api/upvotes"
      method: POST
      postbody: """
      {
        "postId": "{{ .Get "postId" }}"
      }
      """
    )
}
